""" This is a sample Awasu app plugin written in Python.

It accepts several per-channel parameters, and uses them to generate a RSS feed.
"""

#  COPYRIGHT:   (c) Awasu Pty. Ltd. 2002 (all rights reserved).
#               Unauthorized use of this code is prohibited.
#
#  LICENSE:     This software is provided 'as-is', without any express
#               or implied warranty.
#
#               In no event will the author be held liable for any damages
#               arising from the use of this software.
#
#               Permission is granted to anyone to use this software
#               for any non-commercial purpose and to alter it and
#               redistribute it freely, subject to the following restrictions:
#
#               - The origin of this software must not be misrepresented;
#                 you must not claim that you wrote the original software.
#                 If you use this software, an acknowledgement is requested
#                 but not required.
#
#               - Altered source versions must be plainly marked as such,
#                 and must not be misrepresented as being the original software.
#                 Altered source is encouraged to be submitted back to
#                 the original author so it can be shared with the community.
#                 Please share your changes.
#
#               - This notice may not be removed or altered from any
#                 source distribution.

import sys
import configparser

# This is our plugin ID. It must correspond to the value configured in the .plugin file.
APP_PLUGIN_ID = "SamplePythonAppPlugin"

# This is the INI file section that Awasu will pass system parameters to us.
SYSTEM_PARAMETERS_SECTION_NAME = "System"

# This is the INI file section that Awasu will pass global plugin parameters to us.
PLUGIN_PARAMETERS_SECTION_NAME = "PluginParameters"

# This is the INI file section that Awasu will pass per-channel parameters to us.
CHANNEL_PARAMETERS_SECTION_NAME = "ChannelParameters"

# ---------------------------------------------------------------------

def generate_main_page( parser ):
    """Generate the app plugin's main page.

    This is displayed when the plugin is opened from the Control Center.
    """

    # get the app settings
    app_server_url = parser.get( SYSTEM_PARAMETERS_SECTION_NAME, "AppServerUrl", fallback="" )
    if not app_server_url:
        raise RuntimeError( "No app server URL was specified." )
    app_plugin_server_url = parser.get( SYSTEM_PARAMETERS_SECTION_NAME, "AppPluginServerUrl", fallback="" )
    if not app_plugin_server_url:
        raise RuntimeError( "No app plugin server URL was specified." )

    # get the plugin settings
    domain_name = parser.get( PLUGIN_PARAMETERS_SECTION_NAME, "DomainName", fallback="" )
    if not domain_name:
        raise RuntimeError( "No domain name was specified." )

    # generate a URL that will let the user subscribe to a channel that
    # we will generate. We embed some information in URL path and parameters
    # for demonstration purposes. These will get passed in to process_request()
    # when the channel is updated.
    api_token = parser.get( SYSTEM_PARAMETERS_SECTION_NAME, "ApiToken", fallback="" )
    url = "{}/channels/subscribe?token={}&silent=1".format( app_server_url, api_token )
    url += "&url={}/{}/foo/bar?p1=Hello%26p2=World".format( app_plugin_server_url, APP_PLUGIN_ID )

    # generate the main page
    print( """
<html>
<body>
<h2> Sample Python Plugin </h2>
<p> This is the main page for the sample Python plugin.
<p> The plugin settings are:
<ul>
    <li> DomainName: {domain_name}
</ul>
<p> Click <a href='{url}'>here</a> to subscribe to a test channel.
</body>
</html>
""".format( **locals() ) )

# ---------------------------------------------------------------------

def process_request( parser, plugin_request, param_string ):
    """Process a plugin request.

    We get here when Awasu tries to access the URL we generated previously
    in generate_main_page() to get the latest channel feed.
    """

    # get the plugin settings
    domain_name = parser.get( PLUGIN_PARAMETERS_SECTION_NAME, "DomainName", fallback="" )
    if not domain_name:
        raise RuntimeError( "No domain name was specified." )

    # get the channel settings
    n_items = int( parser.get( CHANNEL_PARAMETERS_SECTION_NAME, "nItems", fallback=5 ) )
    item_title_stem = parser.get( CHANNEL_PARAMETERS_SECTION_NAME, "ItemTitleStem", fallback="Item Title" )
    generate_descriptions = int( parser.get( CHANNEL_PARAMETERS_SECTION_NAME, "GenerateDescriptions", fallback=1 ) )

    # put together a channel description
    description = """
<p> This RSS feed was generated by the sample Python plugin.
<p> The script was invoked with the following parameters: <ul>
    <li> pluginRequest: {plugin_request}
    <li> paramString: {param_string}
</ul>
<p> The plugin settings are: <ul>
    <li> DomainName: {domain_name}
</ul>
<p> The channel settings are: <ul>
    <li> nItems: {n_items}
    <li> ItemTitleStem: {item_title_stem}
    <li> GenerateDescriptions: {generate_descriptions}
</ul>
""".format( **locals() )

    # generate the RSS feed
    print( "<rss>" )
    print( "<channel>" )
    print()
    print( "<title>Sample Python Plugin</title>" )
    print( "<link>" + domain_name + "</link>" )
    print( "<description><![CDATA[" + description + "]]></description>" )
    print()
    for i in range( 1, n_items+1 ):
        print( "<item>" )
        print( "    <title>{} {}</title>".format( item_title_stem, i ) )
        print( "    <link>{}/item-{}.html</link>".format( domain_name, i ) )
        if generate_descriptions:
            print( "    <description>This is the description for item {}</description>".format( i ) )
        print( "</item>" )
        print()
    print( "</channel>" )
    print( "</rss>" )

# --- MAIN ------------------------------------------------------------

# load the INI file passed in to us
parser = configparser.ConfigParser()
parser.read( sys.argv[1] )

# process the requested command
scriptCmd = parser.get( SYSTEM_PARAMETERS_SECTION_NAME, "Command", fallback="" )
if scriptCmd == "GenerateMainPage":
    generate_main_page( parser )
elif scriptCmd == "ProcessRequest":
    plugin_request = parser.get( SYSTEM_PARAMETERS_SECTION_NAME, "PluginRequest", fallback="" )
    param_string = parser.get( SYSTEM_PARAMETERS_SECTION_NAME, "ParamString", fallback="" )
    process_request( parser, plugin_request, param_string )
else:
    raise RuntimeError( "Unknown script command: " + scriptCmd )
